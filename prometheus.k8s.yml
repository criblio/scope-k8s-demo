---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scope-k8s-demo-prometheus-conf
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s

    # # Alertmanager configuration
    # alerting:
    #   alertmanagers:
    #   - static_configs:
    #     - targets:
    #       # - alertmanager:9093

    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        static_configs:
        - targets: ['localhost:9090', 'telegraf:9273', 'cribl-internal:9000']
      
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: prometheus
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
     # annotations:
     #   appscope.dev/disable: "false"
    spec:
      containers:
        - image: cribl/scope-k8s-demo-prometheus
          command: ["/scope/ldscope"]
          args: ["/opt/prom/prometheus", "--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/opt/prom/console_libraries", "--web.console.templates=/opt/prom/consoles", "--enable-feature=remote-write-receiver"]
          imagePullPolicy: IfNotPresent
          name: prometheus
          ports:
            - containerPort: 9090
          env:
            - name: "SCOPE_EVENT_HTTP_HEADER"
              value: "(?i)Cookie.*"
          resources: 
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: prometheus-etc
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-etc
          configMap:
            name: scope-k8s-demo-prometheus-conf
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: prometheus
  name: prometheus
spec:
  type: NodePort
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
      nodePort: 30002
  selector:
    app.kubernetes.io/name: prometheus
